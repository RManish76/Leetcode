=> The solution which is used called bitmasking.

=> 1<<n => pow(2,n)
and using n elements of array we can create pow(2,n) uniqe subset of arrya including blank subset. below is example.

=> Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28

=> so the first loop did below masking for xor calcutaion:

i  5 1 6	value from array if bit is set.
0  0 0 0	{}
1  0 0 1	{6}
2  0 1 0	{1}
3  0 1 1	{1,6}
4  1 0 0	{5}
5  1 0 1	{5,6}
6  1 1 0	{5,1}
7  1 1 1	{5,1,6}

=> Now according to bit we need to calculate the xor and then sum.